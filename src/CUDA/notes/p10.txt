在伏特架构之前，一个线程束中的线程拥有同一个程序计数器（program counter），但
各自有不同的寄存器状态（register state），从而可以根据程序的逻辑判断选择不同的分支。
选择结构将导致逻辑分支，一个线程束的线程，在同一时刻只能执行一个共同的指令或闲置。
eg:
	if(condition)
	{
		A;
	}
	else
	{
		B;
	}
同一线程束首先运行A，暂停B；A运行完后运行B
程序分支将导致程序效率大大降低。

从伏特架构开始，引入了独立线程调度（Independent Thread Scheduling）机制。每个
线程有自己的程序计数器。

为了实现独立线程调度机制，一个代价是增加了寄存器负担：单个线程的程序计数器
一般需要使用两个寄存器。

线程束级同步函数
void __syncwarp(unsigned mask = 0xffffffff);
如果要排除一些线程，可以用一个对应的二进制位为 0 的掩码参数。
例如，掩码 0xfffffffe 代表排除第 0 号线程。

线程束表决函数
每个warp接收到的返回值唯一。
unsigned __ballot_sync(unsigned mask, int predicate)   //ballot 投票
	返回值只看当前线程的predicate和mask,
	该线程参与，并且predicate=1，返回值为mask
		          predicate=0, 返回值为mask相应位置变0后的结果
unsigned __all_sync(unsigned mask, int predicate);
	所有参与的线程predicate都为1时，返回1，否则返回0
unsigned __any_sync(unsigned mask, int predicate);
	只要参与的线程有一个的predicate为1，就返回1，全0返回0

线程束洗牌函数
T __shfl_sync(unsigned mask,T v, int srcLane, int w = warpSize)
	返回标号为srcLane的线程的v的值，广播式数据交换
T __shfl_up_sync(unsigned mask, T v, unsigned d, int w = warpSize)
	数据向上平移，标号为t的参与线程返回标号为 t-d 线程中的 v 的值。
	满足t-d<0的返回当前线程中 v 的值
T __shfl__down_sync(unsigned mask, T v, unsigned d, int w = warpSize)
	数据向下平移，和__shfl_up_sync恰好概念相反
T __shlf__xor_sync(unsigned mask,T v, int laneMask, int w = warpSize)
	返回t^laneMask中 v 的值
w 只能取 2 4 8 16 32，表示逻辑线程束大小
mask 默认为 0xffffffff,32位二进制，1表示该线程参与计算，0代表不参与

这里所有的线程束内的基本函数(都以_sync结尾)，都具有隐式同步功能。

从伏特架构开始，在使用这些函数时必须使用由 CUDA 9 引入的
新版本，不要再使用原来的没有 _sync 的版本。


在使用协作组功能时，需要在相关源文件包含如下头文件
#include<cooperative_groups.h>
除此之外，还要注意所有与协作组相关的数据类型和函数都定义在
名字空间(namespace) cooperative_groups下
using namespace cooperative_group;

thread_group g32 = tiled_partition(this_thread_block(), 32);
thread_group g4 = tiled_partition(g32, 4);
当这种线程组的大小在编译期间就已知时，可以用如下模板化的版本（可能更加高效）
进行定义：
thread_block_tile<32> g32  = tiled_partition<32>(this_thread_block());
thread_block_tile<4> g4 = tiled_patition<4>(this_thread_block());

这样定义的线程组一般称为线程块片（thread block tile）。线程块片还额外地定义了如下函
数（类似于线程束内的基本函数）：
unsigned __ballot_sync(int predicate);
int __all_sync(int predicate);
int __any_sync(int predicate);
T __shfl_sync(T v, int srcLane);
T __shfl_up_sync(T v, unsigned d);
T __shfl_down_sync(T v, unsigned d);
T __shfl_xor_sync(T v, int laneMask);
没有了掩码mask,所以所有的线程必须参与运算。
